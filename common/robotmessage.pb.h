// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robotmessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_robotmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_robotmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_robotmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_robotmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robotmessage_2eproto;
namespace warehousesim {
class MotionResponse;
class MotionResponseDefaultTypeInternal;
extern MotionResponseDefaultTypeInternal _MotionResponse_default_instance_;
class RobotRequest;
class RobotRequestDefaultTypeInternal;
extern RobotRequestDefaultTypeInternal _RobotRequest_default_instance_;
class ScheduleResponse;
class ScheduleResponseDefaultTypeInternal;
extern ScheduleResponseDefaultTypeInternal _ScheduleResponse_default_instance_;
}  // namespace warehousesim
PROTOBUF_NAMESPACE_OPEN
template<> ::warehousesim::MotionResponse* Arena::CreateMaybeMessage<::warehousesim::MotionResponse>(Arena*);
template<> ::warehousesim::RobotRequest* Arena::CreateMaybeMessage<::warehousesim::RobotRequest>(Arena*);
template<> ::warehousesim::ScheduleResponse* Arena::CreateMaybeMessage<::warehousesim::ScheduleResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace warehousesim {

enum RequestType : int {
  SCHEDULE = 1,
  MOTIONPLAN = 2
};
bool RequestType_IsValid(int value);
constexpr RequestType RequestType_MIN = SCHEDULE;
constexpr RequestType RequestType_MAX = MOTIONPLAN;
constexpr int RequestType_ARRAYSIZE = RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestType_descriptor();
template<typename T>
inline const std::string& RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestType_descriptor(), enum_t_value);
}
inline bool RequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestType>(
    RequestType_descriptor(), name, value);
}
enum ScheduleAction : int {
  HOLD = 1,
  MOVE_UP = 2,
  MOVE_DOWN = 3,
  MOVE_RIGHT = 4,
  MOVE_LEFT = 5
};
bool ScheduleAction_IsValid(int value);
constexpr ScheduleAction ScheduleAction_MIN = HOLD;
constexpr ScheduleAction ScheduleAction_MAX = MOVE_LEFT;
constexpr int ScheduleAction_ARRAYSIZE = ScheduleAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScheduleAction_descriptor();
template<typename T>
inline const std::string& ScheduleAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScheduleAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScheduleAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScheduleAction_descriptor(), enum_t_value);
}
inline bool ScheduleAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ScheduleAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScheduleAction>(
    ScheduleAction_descriptor(), name, value);
}
// ===================================================================

class RobotRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:warehousesim.RobotRequest) */ {
 public:
  inline RobotRequest() : RobotRequest(nullptr) {};
  virtual ~RobotRequest();

  RobotRequest(const RobotRequest& from);
  RobotRequest(RobotRequest&& from) noexcept
    : RobotRequest() {
    *this = ::std::move(from);
  }

  inline RobotRequest& operator=(const RobotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotRequest& operator=(RobotRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotRequest* internal_default_instance() {
    return reinterpret_cast<const RobotRequest*>(
               &_RobotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RobotRequest& a, RobotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotRequest* New() const final {
    return CreateMaybeMessage<RobotRequest>(nullptr);
  }

  RobotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotRequest& from);
  void MergeFrom(const RobotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "warehousesim.RobotRequest";
  }
  protected:
  explicit RobotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robotmessage_2eproto);
    return ::descriptor_table_robotmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFstateFieldNumber = 7,
    kTokenFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kProjectIdFieldNumber = 5,
    kIstateFieldNumber = 6,
    kRewardFieldNumber = 8,
    kTypeFieldNumber = 4,
  };
  // repeated float fstate = 7;
  int fstate_size() const;
  private:
  int _internal_fstate_size() const;
  public:
  void clear_fstate();
  private:
  float _internal_fstate(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fstate() const;
  void _internal_add_fstate(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fstate();
  public:
  float fstate(int index) const;
  void set_fstate(int index, float value);
  void add_fstate(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fstate() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fstate();

  // required int64 token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  ::PROTOBUF_NAMESPACE_ID::int64 token() const;
  void set_token(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_token() const;
  void _internal_set_token(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int64 project_id = 5;
  bool has_project_id() const;
  private:
  bool _internal_has_project_id() const;
  public:
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::int64 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 istate = 6;
  bool has_istate() const;
  private:
  bool _internal_has_istate() const;
  public:
  void clear_istate();
  ::PROTOBUF_NAMESPACE_ID::int64 istate() const;
  void set_istate(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_istate() const;
  void _internal_set_istate(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional float reward = 8;
  bool has_reward() const;
  private:
  bool _internal_has_reward() const;
  public:
  void clear_reward();
  float reward() const;
  void set_reward(float value);
  private:
  float _internal_reward() const;
  void _internal_set_reward(float value);
  public:

  // required .warehousesim.RequestType type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::warehousesim::RequestType type() const;
  void set_type(::warehousesim::RequestType value);
  private:
  ::warehousesim::RequestType _internal_type() const;
  void _internal_set_type(::warehousesim::RequestType value);
  public:

  // @@protoc_insertion_point(class_scope:warehousesim.RobotRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fstate_;
  ::PROTOBUF_NAMESPACE_ID::int64 token_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 project_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 istate_;
  float reward_;
  int type_;
  friend struct ::TableStruct_robotmessage_2eproto;
};
// -------------------------------------------------------------------

class ScheduleResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:warehousesim.ScheduleResponse) */ {
 public:
  inline ScheduleResponse() : ScheduleResponse(nullptr) {};
  virtual ~ScheduleResponse();

  ScheduleResponse(const ScheduleResponse& from);
  ScheduleResponse(ScheduleResponse&& from) noexcept
    : ScheduleResponse() {
    *this = ::std::move(from);
  }

  inline ScheduleResponse& operator=(const ScheduleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleResponse& operator=(ScheduleResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScheduleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScheduleResponse* internal_default_instance() {
    return reinterpret_cast<const ScheduleResponse*>(
               &_ScheduleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScheduleResponse& a, ScheduleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScheduleResponse* New() const final {
    return CreateMaybeMessage<ScheduleResponse>(nullptr);
  }

  ScheduleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScheduleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScheduleResponse& from);
  void MergeFrom(const ScheduleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "warehousesim.ScheduleResponse";
  }
  protected:
  explicit ScheduleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robotmessage_2eproto);
    return ::descriptor_table_robotmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kSessionIdFieldNumber = 4,
    kActionFieldNumber = 3,
  };
  // required int64 token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  ::PROTOBUF_NAMESPACE_ID::int64 token() const;
  void set_token(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_token() const;
  void _internal_set_token(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 session_id = 4;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .warehousesim.ScheduleAction action = 3;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::warehousesim::ScheduleAction action() const;
  void set_action(::warehousesim::ScheduleAction value);
  private:
  ::warehousesim::ScheduleAction _internal_action() const;
  void _internal_set_action(::warehousesim::ScheduleAction value);
  public:

  // @@protoc_insertion_point(class_scope:warehousesim.ScheduleResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 token_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  int action_;
  friend struct ::TableStruct_robotmessage_2eproto;
};
// -------------------------------------------------------------------

class MotionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:warehousesim.MotionResponse) */ {
 public:
  inline MotionResponse() : MotionResponse(nullptr) {};
  virtual ~MotionResponse();

  MotionResponse(const MotionResponse& from);
  MotionResponse(MotionResponse&& from) noexcept
    : MotionResponse() {
    *this = ::std::move(from);
  }

  inline MotionResponse& operator=(const MotionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionResponse& operator=(MotionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MotionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotionResponse* internal_default_instance() {
    return reinterpret_cast<const MotionResponse*>(
               &_MotionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MotionResponse& a, MotionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionResponse* New() const final {
    return CreateMaybeMessage<MotionResponse>(nullptr);
  }

  MotionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionResponse& from);
  void MergeFrom(const MotionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "warehousesim.MotionResponse";
  }
  protected:
  explicit MotionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robotmessage_2eproto);
    return ::descriptor_table_robotmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kLinearVelocityFieldNumber = 3,
    kSwirlVelocityFieldNumber = 4,
    kSessionIdFieldNumber = 5,
  };
  // required int64 token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  ::PROTOBUF_NAMESPACE_ID::int64 token() const;
  void set_token(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_token() const;
  void _internal_set_token(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float linear_velocity = 3;
  bool has_linear_velocity() const;
  private:
  bool _internal_has_linear_velocity() const;
  public:
  void clear_linear_velocity();
  float linear_velocity() const;
  void set_linear_velocity(float value);
  private:
  float _internal_linear_velocity() const;
  void _internal_set_linear_velocity(float value);
  public:

  // required float swirl_velocity = 4;
  bool has_swirl_velocity() const;
  private:
  bool _internal_has_swirl_velocity() const;
  public:
  void clear_swirl_velocity();
  float swirl_velocity() const;
  void set_swirl_velocity(float value);
  private:
  float _internal_swirl_velocity() const;
  void _internal_set_swirl_velocity(float value);
  public:

  // required int32 session_id = 5;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:warehousesim.MotionResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 token_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  float linear_velocity_;
  float swirl_velocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  friend struct ::TableStruct_robotmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RobotRequest

// required int64 token = 1;
inline bool RobotRequest::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RobotRequest::has_token() const {
  return _internal_has_token();
}
inline void RobotRequest::clear_token() {
  token_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RobotRequest::_internal_token() const {
  return token_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RobotRequest::token() const {
  // @@protoc_insertion_point(field_get:warehousesim.RobotRequest.token)
  return _internal_token();
}
inline void RobotRequest::_internal_set_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  token_ = value;
}
inline void RobotRequest::set_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:warehousesim.RobotRequest.token)
}

// required int32 timestamp = 2;
inline bool RobotRequest::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RobotRequest::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void RobotRequest::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RobotRequest::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RobotRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:warehousesim.RobotRequest.timestamp)
  return _internal_timestamp();
}
inline void RobotRequest::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void RobotRequest::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:warehousesim.RobotRequest.timestamp)
}

// required int32 session_id = 3;
inline bool RobotRequest::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RobotRequest::has_session_id() const {
  return _internal_has_session_id();
}
inline void RobotRequest::clear_session_id() {
  session_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RobotRequest::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RobotRequest::session_id() const {
  // @@protoc_insertion_point(field_get:warehousesim.RobotRequest.session_id)
  return _internal_session_id();
}
inline void RobotRequest::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  session_id_ = value;
}
inline void RobotRequest::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:warehousesim.RobotRequest.session_id)
}

// required .warehousesim.RequestType type = 4;
inline bool RobotRequest::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RobotRequest::has_type() const {
  return _internal_has_type();
}
inline void RobotRequest::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::warehousesim::RequestType RobotRequest::_internal_type() const {
  return static_cast< ::warehousesim::RequestType >(type_);
}
inline ::warehousesim::RequestType RobotRequest::type() const {
  // @@protoc_insertion_point(field_get:warehousesim.RobotRequest.type)
  return _internal_type();
}
inline void RobotRequest::_internal_set_type(::warehousesim::RequestType value) {
  assert(::warehousesim::RequestType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void RobotRequest::set_type(::warehousesim::RequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:warehousesim.RobotRequest.type)
}

// required int64 project_id = 5;
inline bool RobotRequest::_internal_has_project_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RobotRequest::has_project_id() const {
  return _internal_has_project_id();
}
inline void RobotRequest::clear_project_id() {
  project_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RobotRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RobotRequest::project_id() const {
  // @@protoc_insertion_point(field_get:warehousesim.RobotRequest.project_id)
  return _internal_project_id();
}
inline void RobotRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  project_id_ = value;
}
inline void RobotRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:warehousesim.RobotRequest.project_id)
}

// optional int64 istate = 6;
inline bool RobotRequest::_internal_has_istate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RobotRequest::has_istate() const {
  return _internal_has_istate();
}
inline void RobotRequest::clear_istate() {
  istate_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RobotRequest::_internal_istate() const {
  return istate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RobotRequest::istate() const {
  // @@protoc_insertion_point(field_get:warehousesim.RobotRequest.istate)
  return _internal_istate();
}
inline void RobotRequest::_internal_set_istate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  istate_ = value;
}
inline void RobotRequest::set_istate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_istate(value);
  // @@protoc_insertion_point(field_set:warehousesim.RobotRequest.istate)
}

// repeated float fstate = 7;
inline int RobotRequest::_internal_fstate_size() const {
  return fstate_.size();
}
inline int RobotRequest::fstate_size() const {
  return _internal_fstate_size();
}
inline void RobotRequest::clear_fstate() {
  fstate_.Clear();
}
inline float RobotRequest::_internal_fstate(int index) const {
  return fstate_.Get(index);
}
inline float RobotRequest::fstate(int index) const {
  // @@protoc_insertion_point(field_get:warehousesim.RobotRequest.fstate)
  return _internal_fstate(index);
}
inline void RobotRequest::set_fstate(int index, float value) {
  fstate_.Set(index, value);
  // @@protoc_insertion_point(field_set:warehousesim.RobotRequest.fstate)
}
inline void RobotRequest::_internal_add_fstate(float value) {
  fstate_.Add(value);
}
inline void RobotRequest::add_fstate(float value) {
  _internal_add_fstate(value);
  // @@protoc_insertion_point(field_add:warehousesim.RobotRequest.fstate)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RobotRequest::_internal_fstate() const {
  return fstate_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RobotRequest::fstate() const {
  // @@protoc_insertion_point(field_list:warehousesim.RobotRequest.fstate)
  return _internal_fstate();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RobotRequest::_internal_mutable_fstate() {
  return &fstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RobotRequest::mutable_fstate() {
  // @@protoc_insertion_point(field_mutable_list:warehousesim.RobotRequest.fstate)
  return _internal_mutable_fstate();
}

// optional float reward = 8;
inline bool RobotRequest::_internal_has_reward() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RobotRequest::has_reward() const {
  return _internal_has_reward();
}
inline void RobotRequest::clear_reward() {
  reward_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float RobotRequest::_internal_reward() const {
  return reward_;
}
inline float RobotRequest::reward() const {
  // @@protoc_insertion_point(field_get:warehousesim.RobotRequest.reward)
  return _internal_reward();
}
inline void RobotRequest::_internal_set_reward(float value) {
  _has_bits_[0] |= 0x00000020u;
  reward_ = value;
}
inline void RobotRequest::set_reward(float value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:warehousesim.RobotRequest.reward)
}

// -------------------------------------------------------------------

// ScheduleResponse

// required int64 token = 1;
inline bool ScheduleResponse::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScheduleResponse::has_token() const {
  return _internal_has_token();
}
inline void ScheduleResponse::clear_token() {
  token_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ScheduleResponse::_internal_token() const {
  return token_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ScheduleResponse::token() const {
  // @@protoc_insertion_point(field_get:warehousesim.ScheduleResponse.token)
  return _internal_token();
}
inline void ScheduleResponse::_internal_set_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  token_ = value;
}
inline void ScheduleResponse::set_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:warehousesim.ScheduleResponse.token)
}

// required int32 timestamp = 2;
inline bool ScheduleResponse::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScheduleResponse::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void ScheduleResponse::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScheduleResponse::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScheduleResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:warehousesim.ScheduleResponse.timestamp)
  return _internal_timestamp();
}
inline void ScheduleResponse::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void ScheduleResponse::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:warehousesim.ScheduleResponse.timestamp)
}

// required .warehousesim.ScheduleAction action = 3;
inline bool ScheduleResponse::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScheduleResponse::has_action() const {
  return _internal_has_action();
}
inline void ScheduleResponse::clear_action() {
  action_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::warehousesim::ScheduleAction ScheduleResponse::_internal_action() const {
  return static_cast< ::warehousesim::ScheduleAction >(action_);
}
inline ::warehousesim::ScheduleAction ScheduleResponse::action() const {
  // @@protoc_insertion_point(field_get:warehousesim.ScheduleResponse.action)
  return _internal_action();
}
inline void ScheduleResponse::_internal_set_action(::warehousesim::ScheduleAction value) {
  assert(::warehousesim::ScheduleAction_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  action_ = value;
}
inline void ScheduleResponse::set_action(::warehousesim::ScheduleAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:warehousesim.ScheduleResponse.action)
}

// required int32 session_id = 4;
inline bool ScheduleResponse::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScheduleResponse::has_session_id() const {
  return _internal_has_session_id();
}
inline void ScheduleResponse::clear_session_id() {
  session_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScheduleResponse::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScheduleResponse::session_id() const {
  // @@protoc_insertion_point(field_get:warehousesim.ScheduleResponse.session_id)
  return _internal_session_id();
}
inline void ScheduleResponse::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  session_id_ = value;
}
inline void ScheduleResponse::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:warehousesim.ScheduleResponse.session_id)
}

// -------------------------------------------------------------------

// MotionResponse

// required int64 token = 1;
inline bool MotionResponse::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MotionResponse::has_token() const {
  return _internal_has_token();
}
inline void MotionResponse::clear_token() {
  token_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MotionResponse::_internal_token() const {
  return token_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MotionResponse::token() const {
  // @@protoc_insertion_point(field_get:warehousesim.MotionResponse.token)
  return _internal_token();
}
inline void MotionResponse::_internal_set_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  token_ = value;
}
inline void MotionResponse::set_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:warehousesim.MotionResponse.token)
}

// required int32 timestamp = 2;
inline bool MotionResponse::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MotionResponse::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void MotionResponse::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionResponse::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:warehousesim.MotionResponse.timestamp)
  return _internal_timestamp();
}
inline void MotionResponse::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void MotionResponse::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:warehousesim.MotionResponse.timestamp)
}

// required float linear_velocity = 3;
inline bool MotionResponse::_internal_has_linear_velocity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MotionResponse::has_linear_velocity() const {
  return _internal_has_linear_velocity();
}
inline void MotionResponse::clear_linear_velocity() {
  linear_velocity_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MotionResponse::_internal_linear_velocity() const {
  return linear_velocity_;
}
inline float MotionResponse::linear_velocity() const {
  // @@protoc_insertion_point(field_get:warehousesim.MotionResponse.linear_velocity)
  return _internal_linear_velocity();
}
inline void MotionResponse::_internal_set_linear_velocity(float value) {
  _has_bits_[0] |= 0x00000004u;
  linear_velocity_ = value;
}
inline void MotionResponse::set_linear_velocity(float value) {
  _internal_set_linear_velocity(value);
  // @@protoc_insertion_point(field_set:warehousesim.MotionResponse.linear_velocity)
}

// required float swirl_velocity = 4;
inline bool MotionResponse::_internal_has_swirl_velocity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MotionResponse::has_swirl_velocity() const {
  return _internal_has_swirl_velocity();
}
inline void MotionResponse::clear_swirl_velocity() {
  swirl_velocity_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float MotionResponse::_internal_swirl_velocity() const {
  return swirl_velocity_;
}
inline float MotionResponse::swirl_velocity() const {
  // @@protoc_insertion_point(field_get:warehousesim.MotionResponse.swirl_velocity)
  return _internal_swirl_velocity();
}
inline void MotionResponse::_internal_set_swirl_velocity(float value) {
  _has_bits_[0] |= 0x00000008u;
  swirl_velocity_ = value;
}
inline void MotionResponse::set_swirl_velocity(float value) {
  _internal_set_swirl_velocity(value);
  // @@protoc_insertion_point(field_set:warehousesim.MotionResponse.swirl_velocity)
}

// required int32 session_id = 5;
inline bool MotionResponse::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MotionResponse::has_session_id() const {
  return _internal_has_session_id();
}
inline void MotionResponse::clear_session_id() {
  session_id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionResponse::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionResponse::session_id() const {
  // @@protoc_insertion_point(field_get:warehousesim.MotionResponse.session_id)
  return _internal_session_id();
}
inline void MotionResponse::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  session_id_ = value;
}
inline void MotionResponse::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:warehousesim.MotionResponse.session_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace warehousesim

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::warehousesim::RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::warehousesim::RequestType>() {
  return ::warehousesim::RequestType_descriptor();
}
template <> struct is_proto_enum< ::warehousesim::ScheduleAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::warehousesim::ScheduleAction>() {
  return ::warehousesim::ScheduleAction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_robotmessage_2eproto
